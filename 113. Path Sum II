Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: []
Example 3:

Input: root = [1,2], targetSum = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000



***********************************---------------------------------******************************************-------------------------------*******************************----


class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        Queue<TreeNode> nodeQ = new LinkedList<>();
        Queue<Integer> sumQ = new LinkedList<>();
        Queue<List<Integer>> pathQ = new LinkedList<>();
        List<List<Integer>> res = new LinkedList<>();
        
        if (root == null){
            return res;
        }
        
        nodeQ.offer(root);
        sumQ.offer(root.val);
        
        List<Integer> path = new ArrayList<>();
        path.add(root.val);
        pathQ.offer(path);
        
        while (!nodeQ.isEmpty() && !sumQ.isEmpty()){
            TreeNode currNode = nodeQ.poll();
            int currSum = sumQ.poll();
            List<Integer> currPath = pathQ.poll();
            if (currNode.left == null && currNode.right == null && currSum == sum){
                res.add(currPath);
            }
            
            if (currNode.left != null){
                nodeQ.offer(currNode.left);
                sumQ.offer(currNode.left.val + currSum);
                List<Integer> newPath = new ArrayList(currPath);
                newPath.add(currNode.left.val);
                pathQ.offer(newPath);
            }
            
            if (currNode.right != null){
                nodeQ.offer(currNode.right);
                sumQ.offer(currNode.right.val + currSum);
                List<Integer> newPath = new ArrayList(currPath);
                newPath.add(currNode.right.val);
                pathQ.offer(newPath);
            }
        }
        
        return res;
    }
}
