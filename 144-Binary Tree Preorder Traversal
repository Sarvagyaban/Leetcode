Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CODE


class Solution 
{
    public List<Integer> preorderTraversal(TreeNode root)
    {
       List<Integer> list=new ArrayList<Integer>();
        dfs(root,list);
        return list;
    }
    private void dfs(TreeNode node,List<Integer> list){
        if(node==null)
            return;
        list.add(node.val);
        dfs(node.left,list);
        dfs(node.right,list);
    }
}
